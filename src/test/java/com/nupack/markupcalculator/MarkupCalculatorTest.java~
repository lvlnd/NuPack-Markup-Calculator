package test.java.com.nupack.markupcalculator;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;

import main.java.com.nupack.markupcalculator.MarkupCalculator;
import main.java.com.nupack.markupcalculator.ProductType;

import org.junit.Rule;
import org.junit.Test;
import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.junit.runners.BlockJUnit4ClassRunner;
import org.hamcrest.Matchers;

@RunWith(value = BlockJUnit4ClassRunner.class)
public class MarkupCalculatorTest {

    @Rule
    public ExpectedException exception = ExpectedException.none();
    
    @Test
    public void testFood () {
        Assert.assertEquals ("failure - food test produced the wrong result",
                             new BigDecimal (1591.58, new MathContext (6)),
                             MarkupCalculator.determinePrice (new BigDecimal (1299.99),
                                                              BigInteger.valueOf (3),
                                                              ProductType.FOOD)
                             .round(new MathContext (6)));
    }
    
    @Test
    public void testDrugs () {
        Assert.assertEquals ("failure - drugs test produced the wrong result",
                             new BigDecimal (6199.81, new MathContext (6)),
                             MarkupCalculator.determinePrice (new BigDecimal (5432.00),
                                                              BigInteger.valueOf (1),
                                                              ProductType.PHARMA)
                             .round(new MathContext (6)));
    }
    
    @Test
    public void testBooks () {
        Assert.assertEquals ("failure - books test produced the wrong result",
                             new BigDecimal (13707.63, new MathContext (6)),
                             MarkupCalculator.determinePrice (new BigDecimal (12456.95),
                                                              BigInteger.valueOf (4),
                                                              ProductType.OTHER)
                             .round (new MathContext (6)));
    }
    
    @Test
    public void testElectronics () {
        Assert.assertEquals ("failure - electronics test produced the wrong result",
                             new BigDecimal (1134.001, new MathContext (6)),
                             MarkupCalculator.determinePrice (new BigDecimal (1000.00),
                                                              BigInteger.valueOf (5),
                                                              ProductType.ELECTRONICS)
                             .round(new MathContext (6)));
    }

    @Test
    public void testNegativePersons () {
        exception.expect(IllegalArgumentException.class);
        exception.expectMessage (Matchers.containsString ("people"));
        MarkupCalculator.determinePrice (new BigDecimal (0.0), BigInteger.valueOf (-1), ProductType.OTHER);    
    }

    @Test
    public void testNegativePrice () {
        exception.expect (IllegalArgumentException.class);
        exception.expectMessage (Matchers.containsString ("price"));
        MarkupCalculator.determinePrice(new BigDecimal (-1.0), BigInteger.valueOf (2), ProductType.OTHER);
    }

    @Test
}
