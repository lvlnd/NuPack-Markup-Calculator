package main.java.com.nupack.markupcalculator;

import java.math.BigDecimal;
import java.math.BigInteger;

public class MarkupCalculator {

    public static BigDecimal determineMarkup (BigInteger numPeople) {
        return new BigDecimal (numPeople).multiply(new BigDecimal (0.012));
    }

    public static BigDecimal determineMarkup (BigInteger numPeople, ProductType type) {
        return determineMarkup(numPeople).add(new BigDecimal (determineMarkup(type))) ;
    }

    public static double determineMarkup (ProductType type) {
        switch (type) {
        case PHARMA:
            return 0.075;
        case FOOD:
            return 0.13;
        case ELECTRONICS:
            return 0.02;
        default:
            return 0;
        }
    }

    public static BigDecimal determinePrice (BigDecimal basePrice) throws IllegalArgumentException {
        //tests if basePrice is less than 0
        if (basePrice.compareTo(new BigDecimal (0)) == -1) {
            throw new IllegalArgumentException ("Base price cannot be negative");
        }
        return basePrice.multiply(new BigDecimal (1.05));
    }

	/**
	 *
	 *
	 * @param basePrice
	 * @param numPeople
	 * @return
	 *
	 * @throws IllegalArgumentException
	 */
    public static BigDecimal determinePrice (BigDecimal basePrice, BigInteger numPeople) throws IllegalArgumentException {
        //tests if numPeople is less than 0
        if (numPeople.compareTo(BigInteger.valueOf(1)) == -1) {
            throw new IllegalArgumentException ("Number of people cannot be negative");
        }
        
        return determinePrice (basePrice).multiply (determineMarkup (numPeople).add (new BigDecimal (1)));
    }

    public static BigDecimal determinePrice (BigDecimal basePrice, BigInteger numPeople, ProductType type) {
        return determinePrice (basePrice).multiply (determineMarkup (numPeople, type).add (new BigDecimal (1)));
    }
}
